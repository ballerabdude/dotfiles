#!/usr/bin/env bash

clear

# if [[ $OS == "Darwin" ]]; then
#   # Add future support for installing dependencies
# elif [[ $OS == "Linux" ]] && [[ ! -z $(command -v lsb_release) ]]; then
#     # Add future support for installing dependencies
      # sudo apt-get install build-essential procps curl file git
# fi


OS=$(uname -s)

# include my library helpers for colorized echo and require_brew, etc
source ./lib_sh/echos.sh

bot "I will be making you cool :)"

#####
# install homebrew (CLI Packages)
#####
bot "Installing Packages"

curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh | bash
curl -fsSL -o- https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash

if [[ $OS == "Darwin" ]]; then
  # Run commands for macOS:
  export PATH=/opt/homebrew/bin:$PATH
elif [[ $OS == "Linux" ]] && [[ ! -z $(command -v lsb_release) ]]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

brew doctor
brew upgrade 

if [[ $OS == "Darwin" ]]; then
  # Run commands for macOS:
  brew install wget tmux gawk jq tldr ncdu tfenv azure-cli pyenv nvm telnet k9s awscli
elif [[ $OS == "Linux" ]] && [[ ! -z $(command -v lsb_release) ]]; then
  DISTRO=$(lsb_release -is)
  if [ $DISTRO == "Ubuntu" ] || [ $DISTRO == "Debian" ] ; then
    # Run commands for Ubuntu:
    sudo apt-get update -y
    sudo apt-get install -y dnsutils unzip jq
    # brew install tmux gawk jq tldr ncdu tfenv azure-cli pyenv nvm k9s awscli

    sudo apt-get update -y; sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \
    libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
    libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev

    sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
    apt-cache policy docker-ce
    sudo apt install -y docker-ce

    source ./ubuntu/kubectl.sh
    source ./ubuntu/k9s.sh
    source ./ubuntu/tfenv.sh
    source ./ubuntu/az-cli.sh

    if ! type pyenv > /dev/null 2>&1; then
      # the command doesn't exist, so install it
      curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
    fi

    if ! type nvm > /dev/null 2>&1; then
      # the command doesn't exist, so install it
      curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash 
    fi

  fi
fi


bot "creating symlinks for project dotfiles..."
pushd homedir > /dev/null 2>&1
now=$(date +"%Y.%m.%d.%H.%M.%S")

for file in .*; do
  if [[ $file == "." || $file == ".." ]]; then
    continue
  fi
  running "~/$file"
  # if the file exists:
  if [[ -e ~/$file ]]; then
      mkdir -p ~/.dotfiles_backup/$now
      mv ~/$file ~/.dotfiles_backup/$now/$file
      echo "backup saved as ~/.dotfiles_backup/$now/$file"
  fi
  # symlink might still exist
  unlink ~/$file > /dev/null 2>&1
  # create the link
  ln -s ~/.dotfiles/homedir/$file ~/$file
  echo -en '\tlinked';ok
done

sudo chsh -s $(which zsh) $(whoami)

popd > /dev/null 2>&1